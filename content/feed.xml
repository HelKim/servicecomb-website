<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-04-08T14:24:29+08:00</updated><id>/</id><title type="html">Apache ServiceComb</title><subtitle>The homepage of ServiceComb</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;&quot;/assets/images/ServiceComb-logo-3.jpg&quot;, &quot;bio&quot;=&gt;&quot;ServiceComb is a microservice framework that provides service registration, discovery, configuration and management utilities.&quot;, &quot;biocn&quot;=&gt;&quot;ServiceComb提供了一套关于服务注册，服务发现，服务配置以及管理功能的微服务框架&quot;, &quot;location&quot;=&gt;&quot;China&quot;, &quot;locationcn&quot;=&gt;&quot;中国&quot;, &quot;email&quot;=&gt;&quot;dev@servicecomb.apache.org&quot;, &quot;uri&quot;=&gt;nil, &quot;bitbucket&quot;=&gt;nil, &quot;codepen&quot;=&gt;nil, &quot;dribbble&quot;=&gt;nil, &quot;flickr&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;foursquare&quot;=&gt;nil, &quot;github&quot;=&gt;&quot;ServiceComb&quot;, &quot;google_plus&quot;=&gt;nil, &quot;keybase&quot;=&gt;nil, &quot;instagram&quot;=&gt;nil, &quot;lastfm&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;pinterest&quot;=&gt;nil, &quot;soundcloud&quot;=&gt;nil, &quot;stackoverflow&quot;=&gt;nil, &quot;steam&quot;=&gt;nil, &quot;tumblr&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;vine&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;xing&quot;=&gt;nil, &quot;youtube&quot;=&gt;nil}</name><email>dev@servicecomb.apache.org</email></author><entry xml:lang="cn"><title type="html">ServiceComb + Zipkin : 使用篇——自定义追踪</title><link href="/cn/docs/customized-tracing-with-servicecomb/" rel="alternate" type="text/html" title="ServiceComb + Zipkin : 使用篇——自定义追踪" /><published>2019-01-23T00:00:00+08:00</published><updated>2019-01-23T09:30:30+08:00</updated><id>/cn/docs/customized-tracing-with-servicecomb</id><content type="html" xml:base="/cn/docs/customized-tracing-with-servicecomb/">&lt;h1 id=&quot;自定义追踪功能&quot;&gt;自定义追踪功能&lt;/h1&gt;
&lt;p&gt;ServiceComb 支持用户在程序中的指定位置处增加追踪数据，可以实现更细力度的追踪。&lt;/p&gt;
&lt;h2 id=&quot;使用步骤&quot;&gt;使用步骤&lt;/h2&gt;
&lt;p&gt;添加依赖&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tracing-zipkin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在程序入口或者配置处添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableZipkinTracing&lt;/code&gt; 注解&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.tracing.zipkin.EnableZipkinTracing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableServiceComb&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableZipkinTracing&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CalculatorApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CalculatorApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在服务程序中的调用方法处添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Span&lt;/code&gt; 注解&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.tracing.Span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CalculatorServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculatorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
   * {@inheritDoc}
   */&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Span&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Arguments must be above 0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightInMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bmi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heightInMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightInMeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;roundToOnePrecision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;roundToOnePrecision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setScale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoundingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HALF_UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doubleValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用限制：自定义跟踪仅支持注解请求线程中的方法调用，且带有&lt;code class=&quot;highlighter-rouge&quot;&gt;@Span&lt;/code&gt;的类必须是spring管理的bean。&lt;/p&gt;
&lt;h2 id=&quot;快速演示&quot;&gt;快速演示&lt;/h2&gt;
&lt;p&gt;下面使用java-chassis/samples/bmi 程序演示，如何使用自定义追踪功能定位应用程序中的问题？&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;正常运行bmi程序，结果如下
 &lt;img src=&quot;https://img-blog.csdnimg.cn/20190122101706113.png&quot; alt=&quot;正常结果&quot; /&gt;
 &lt;img src=&quot;https://img-blog.csdnimg.cn/20190122101505915.png&quot; alt=&quot;zipkin追踪正常情况&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;在bmi程序的calculator服务的calculate方法处，增加一块进程休眠代码（模拟实际工作中调用当前线程处理其他业务的情景），如下
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Arguments must be above 0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightInMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bmi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heightInMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightInMeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;roundToOnePrecision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;运行bmi程序，出现如下异常结果。查看zipkin追踪情况和程序报错信息，可以初步确定问题由 bmi/calculator 服务超时未响应导致
 &lt;img src=&quot;https://img-blog.csdnimg.cn/20190121193215681.png&quot; alt=&quot;异常结果&quot; /&gt;     	
 &lt;img src=&quot;https://img-blog.csdnimg.cn/20190121195130561.png&quot; alt=&quot;zipkin追踪情况&quot; /&gt;
 &lt;img src=&quot;https://img-blog.csdnimg.cn/20190122093001881.png&quot; alt=&quot;程序报错信息&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;使用自定义追踪功能，定位问题具体位置
 在calculator服务中配置自定义追踪功能，添加注解 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Span&lt;/code&gt;在calculator服务的方法上 。运行bmi程序，zipkin追踪耗时情况如下。根据span占用的时间戳，可以确定延时问题出现在calculate方法处，点击span，可查看call.path 获取calculate方法的具体位置。
 &lt;img src=&quot;https://img-blog.csdnimg.cn/20190121200305278.png&quot; alt=&quot;zipkin追踪异常情况&quot; /&gt;
 &lt;img src=&quot;https://img-blog.csdnimg.cn/20190121200411404.png&quot; alt=&quot;span信息信息&quot; /&gt;
    &lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
    &lt;p&gt;从上面的示例可以看出，通过配置ServiceComb的自定义追踪功能，可以实现对服务中调用方法、接口的追踪，实现更细力度化的追踪。这对于我们监控服务内部调用、定位服务中的延时问题等非常有帮助。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Zhou Zhongyuan</name></author><category term="zipkin" /><category term="分布式追踪" /><summary type="html">本篇将介绍如何使用 ServiceComb 和 Zipkin 实现自定义追踪</summary></entry><entry xml:lang="cn"><title type="html">基于 ServiceComb 和 SpringCloud Zuul 快速构建微服务系统</title><link href="/cn/docs/servicecomb-springcloud-zuul-demo/" rel="alternate" type="text/html" title="基于 ServiceComb 和 SpringCloud Zuul 快速构建微服务系统" /><published>2019-01-22T00:00:00+08:00</published><updated>2019-01-22T17:18:43+08:00</updated><id>/cn/docs/servicecomb-springcloud-zuul-demo</id><content type="html" xml:base="/cn/docs/servicecomb-springcloud-zuul-demo/">&lt;p&gt;基于ServiceComb和Zuul实现微服务网关，如此一来用户只需要专注实现其业务需求。&lt;/p&gt;

&lt;h3 id=&quot;场景&quot;&gt;场景&lt;/h3&gt;
&lt;p&gt;本文将以一个简单的Hello服务演示网关的使用。Hello微服务提供一个hello/{name}接口，只要传递路径参数name就可以返回打招呼内容。接口返回结果通过网关将在浏览器界面显示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/zuul/demo-theory.png&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;技术准备&quot;&gt;技术准备&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://servicecomb.apache.org/cn/docs/quick-start/&quot;&gt;ServiceComb&lt;/a&gt; 作为后端微服务核心框架 &lt;br /&gt;
&lt;a href=&quot;https://github.com/apache/servicecomb-service-center&quot;&gt;ServiceCenter&lt;/a&gt; 作为服务发现与注册中心&lt;br /&gt;
&lt;a href=&quot;https://cloud.spring.io/spring-cloud-netflix/multi/multi__router_and_filter_zuul.html&quot;&gt;SpringCloud Zuul&lt;/a&gt; 组件做服务网关&lt;/p&gt;

&lt;h3 id=&quot;环境准备&quot;&gt;环境准备&lt;/h3&gt;
&lt;p&gt;以下环境为Windows 64位系统&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装git，详情可参考&lt;a href=&quot;https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git&quot;&gt;git安装教程&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装JDK 1.8，详情可参考&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html&quot;&gt;JDK安装教程&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装Maven 3.x，详情可参考&lt;a href=&quot;https://maven.apache.org/install.html&quot;&gt;Maven安装教程&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ServiceCenter安装&lt;br /&gt;
下载地址：http://mirrors.hust.edu.cn/apache/servicecomb/servicecomb-service-center/1.1.0/apache-servicecomb-service-center-1.1.0-windows-amd64.tar.gz
下载后解压如下
&lt;img src=&quot;../../assets/images/zuul/demo-dir.png&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在该目录下双击service-center.exe即可启动，命令窗口中出现如下信息基本代表ServiceCenter启动成功，从这个信息也可以得知ServiceCenter监听的是30100端口，等下配置文件要用到。
&lt;img src=&quot;../../assets/images/zuul/demo-servicecenter-console1.png&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题点： 有可能会有如下信息，这个一般是端口被占用，很可能你打开了两个ServiceCenter，都关闭后再打开就可以了。
&lt;img src=&quot;../../assets/images/zuul/demo-servicecenter-console2.png&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;示例&quot;&gt;示例&lt;/h3&gt;

&lt;h4 id=&quot;一--后端微服务-helloservice&quot;&gt;一.  后端微服务 HelloService&lt;/h4&gt;
&lt;h5 id=&quot;1-添加依赖&quot;&gt;1. 添加依赖&lt;/h5&gt;
&lt;p&gt;新建maven项目HelloService，pom文件如下&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.servicecomb.example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;HelloService&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.12.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-provider&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.hibernate&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hibernate-validator&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.3.6.Final&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;java-chassis-dependencies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-配置&quot;&gt;2. 配置&lt;/h5&gt;
&lt;p&gt;新建ServiceComb配置文件src/main/resources/microservice.yaml，内容如下&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;APPLICATION_ID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;helloworld&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 应用名，注意与网关服务器的应用名保持一致&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;service_description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;helloservice&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 微服务名&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.1&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# 微服务版本号&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;servicecomb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:30100&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 服务注册中心（重要）&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:7777&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 微服务启动端口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3-项目入口&quot;&gt;3. 项目入口&lt;/h5&gt;

&lt;p&gt;新建启动类HelloApplication.java，内容如下&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servicecomb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.springboot.starter.provider.EnableServiceComb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//这个注解使Spring能够自动配置ServiceComb模块&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableServiceComb&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新建Controller类HelloController.java （这里我习惯SpringMvc的叫法，重点看注解）&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servicecomb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.provider.rest.common.RestSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//restful服务契约&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemaId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;helloController&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/hello/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;4-启动&quot;&gt;4. 启动&lt;/h5&gt;
&lt;p&gt;到此，一个微服务就写完了，如下在IDEA里面直接启动应用
&lt;img src=&quot;../../assets/images/zuul/demo-helloservice-start.png&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;二-编写zuul网关服务&quot;&gt;二. 编写Zuul网关服务&lt;/h4&gt;
&lt;h5 id=&quot;1-添加依赖-1&quot;&gt;1. 添加依赖&lt;/h5&gt;
&lt;p&gt;新建maven项目 zuulserver，pom文件如下&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.servicecomb.example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;zuulserver&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.12.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
      
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ServiceComb框架，提供基础能力 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ServiceComb与SpringCloud Zuul的集成框架 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-discovery&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- SpringCloud Zuul框架 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-zuul&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 导入ServiceComb所需依赖 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;java-chassis-dependencies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;2-配置文件&quot;&gt;2. 配置文件&lt;/h5&gt;
&lt;p&gt;新建springboot配置文件src/main/resources/application.yaml，内容如下&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;zuul&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# 定义路由转发规则。凡是匹配/helloservice/**的路由都会转发到helloservice服务&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;helloservice&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/helloservice/**&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;            
  &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#SpringBoot框架的配置，服务启动端口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;新建ServiceComb配置文件src/main/resources/microservice.yaml，内容如下&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;APPLICATION_ID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;helloworld&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 应用ID&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;service_description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gateway&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#  微服务名&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.1&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#  微服务版本&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;servicecomb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:30100&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 服务注册中心地址 （重要）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3项目入口&quot;&gt;3.项目入口&lt;/h5&gt;
&lt;p&gt;新建启动类 ZuulApplication.java&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servicecomb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.springboot.starter.provider.EnableServiceComb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cloud.netflix.zuul.EnableZuulProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableZuulProxy&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableServiceComb&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZuulApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZuulApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新建静态文件 src/main/resources/static/index.html，内容如下 （static目录是按springboot项目规范，属于应用静态文件根目录）&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width:300px; margin:0 auto ; margin-top: 50px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input-group mb-3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-control&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-describedby=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;basic-addon1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input-group-prepend&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-primary&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testCall()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;打招呼&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height: 200px;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-control&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resultDiv&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/helloservice/hello/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resultDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resultDiv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;resultDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resultDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resultDiv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;resultDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;4-启动-1&quot;&gt;4. 启动&lt;/h5&gt;
&lt;p&gt;到此，网关服务器写完，如下在IDEA里面直接启动应用
&lt;img src=&quot;../../assets/images/zuul/demo-zuulservice-start.jpg&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;三-演示效果&quot;&gt;三. 演示效果&lt;/h4&gt;
&lt;p&gt;浏览器访问http://localhost:8080/ ，如下图。
在输入框中输入姓名，就可以在下面看到打招呼的信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/zuul/demo-run.png&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;从以上的示例可以看出，通过 ServiceComb 结合SpringCloud Zuul 实现服务网关功能只需一些简单的配置。后续可以在网关服务上实现统一的鉴权，日志记录，和自定义过滤器等。&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;[1] &lt;a href=&quot;https://cloud.spring.io/spring-cloud-netflix/multi/multi__router_and_filter_zuul.html&quot;&gt;SpringCloud Zuul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[2] &lt;a href=&quot;http://servicecomb.apache.org/cn/docs/quick-start/&quot;&gt;ServiceComb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Lisen</name></author><category term="微服务" /><category term="ServiceComb" /><category term="SpringCloud Zuul" /><summary type="html">基于 ServiceComb 和 SpringCloud Zuul 快速构建微服务系统</summary></entry><entry xml:lang="cn"><title type="html">基于服务的分布式事务(下篇)</title><link href="/cn/docs/distributed-transaction-of-services-2/" rel="alternate" type="text/html" title="基于服务的分布式事务(下篇)" /><published>2019-01-10T00:00:00+08:00</published><updated>2019-01-10T15:30:43+08:00</updated><id>/cn/docs/distributed-transaction-of-services-2</id><content type="html" xml:base="/cn/docs/distributed-transaction-of-services-2/">&lt;h3 id=&quot;分布式事务协调场景介绍&quot;&gt;分布式事务协调场景介绍&lt;/h3&gt;

&lt;p&gt;在基于服务的分布式事务上篇中， 我们举了了一个业务场景，就是一个初始服务创建了一个分布式事务，在这个分布式事务包含了两个参与服务的本地事务，这两个本地事务由初始服务通过调用两个参与事务的服务方式组合在一起。根据分布式事务一致性的要求，这两个本地事务要么同时成功，要么同时失败。 由于这两个参与事务的服务并不知道对方的存在，当一个参与服务调用（Invocation A）成功而另外一个参与服务调用（Invocation B）失败，我们就需要分布式事务协调器的进行相关的补偿，保证分布式事务的一致性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-DT-introduction.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;分布式saga&quot;&gt;分布式Saga&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/servicecomb-pack&quot;&gt;ServiceComb Pack&lt;/a&gt;目默认采⽤用的是名为Saga分布式事务协调方案。&lt;a href=&quot;https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&quot;&gt;Sagas&lt;/a&gt;这个概念来源于三十多年前的一篇数据库论文，一个Saga事务是一个有多个短时事务组成的长时的事务。 在分布式事务场景下，我们把一个Saga分布式事务看做是一个由多个本地事务组成的事务，每个本地事务都有一个与之对应的补偿事务。在Saga事务的执行过程中，如果出现某一步执行出现异常的，Saga事务会被终止，同时会调用之前执行成功的事务对应的补偿事务完成相关的恢复操作，这样保证Saga相关的本地事务要么同时成功，要么通过执行补偿恢复成为Saga执行之前的状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-saga-introduction.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/servicecomb-pack&quot;&gt;ServiceComb Pack&lt;/a&gt; 在实现分布式Saga协调协议的过程中需要追踪分布式事务的执行情况。首先介绍一下正常流程下分布式事务执行流程是如何记录下来的 ，下图的红线部分是Omega端与Alpha端交互序列图，蓝色部分原有服务直接的调用。在分布式事务初始阶段由初始服务的Omega将&lt;strong&gt;SagaStarted&lt;/strong&gt;事件到Alpha进行进行分布式事务备案。当有新的服务参与到这个分布式事务中，参与服务的Omega会在本地事务执行前发送&lt;strong&gt;TxStarted&lt;/strong&gt;到Alpha端； 并在本地事务执行成功之后将&lt;strong&gt;TxEnded&lt;/strong&gt;事件发送到Alpha。如果分布式事务正常结束，初始服务Omega会直接发送&lt;strong&gt;SagaEnded&lt;/strong&gt;事件到Alpha结束整个分布式事务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-saga-sq1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参与分布式事务的服务在执行本地事务出现异常，如下图所示Transaction B执行出现错误。这个时候参与服务B会向Alpha发送一个&lt;strong&gt;TxAborted&lt;/strong&gt;的事件，Alpha收到这个事件后会将整个Saga事务挂起，终止Saga事务的继续执行。如果这个时候还有其他的Omega向Alpha发送挂载在这个Saga事务下的&lt;strong&gt;TxStarted&lt;/strong&gt;事件的话，Alpha会直接发送拒绝应答消息通知Omega这个Saga事务已经出现异常，Omega收到应答之后会抛出异常拒绝执行新的本地事务。由于初始服务在调用参与服务B的过程中，通过服务B的应答消息也知道了服务调用失败的消息，初始服务也会发生&lt;strong&gt;SagaAborted&lt;/strong&gt;事件至Alpha来关闭整个Saga事件。虽然在&lt;strong&gt;TxAborted&lt;/strong&gt;存在的情况下，&lt;strong&gt;SagaAborted&lt;/strong&gt;事件看上去有点多余，但是为了应对诸如初始服务无法调用参与服务B的情况下（这个时候Alpha没有收到&lt;strong&gt;TxAborted&lt;/strong&gt;事件），设置&lt;strong&gt;SagaAborted&lt;/strong&gt;事件还是非常有必要的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-saga-exception.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在Alpha可以通过查询&lt;strong&gt;TxEnded&lt;/strong&gt;事件可以获取到需要进行补偿恢复的服务信息，Alpha会向相关的服务实例Omega发送&lt;strong&gt;TxCompensated&lt;/strong&gt;事件，由Omega调用服务实例补偿方法进行相关的恢复操作。为了恢复本地事务执行上下文，ServiceComb Pack会将&lt;strong&gt;TxStarted&lt;/strong&gt;传递过来的方法参数列表信息放入&lt;strong&gt;TxCompensated&lt;/strong&gt;消息中传递给Omega，除此之外ServiceComb Pack 还会将&lt;a href=&quot;[OmegaContext](https://github.com/apache/servicecomb-packblob/master/omega/omega-context/src/main/java/org/apache/servicecomb/saga/omega/context/OmegaContext.java)&quot;&gt;OmegaContext&lt;/a&gt;的全局事务ID和本地事务ID设置成本地事务执行时的状态。用户可以在应用代码可以通过获取这些ID在分布式缓存或者数据库中检索获取自定义的上下文环境。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-saga-exception2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了要考虑异常情况，我们还需要考虑事务执行超时的处理的问题（为了简化场景，这里我们不考虑由于网络连接中断导致的事务异常或者结束消息丢包的情况）。目前我们可以在saga事务以及本地事务设置执行超时时间，Alpha上的事件扫描器会定时查找Started事件在设定的超时时间内是否有对应的Aborted或者Ended事件，如果没有，Alpha事件扫描器则会生成对应的Aborted时间触发相关的补偿操作。&lt;/p&gt;

&lt;p&gt;当整个saga事务执行超时，Alpha事件扫描器会在后台数据库中添加&lt;strong&gt;SagaAborted&lt;/strong&gt;事件终止整个Saga事务，并且调用Omega注册的恢复函数进行相关的恢复操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-saga-timeout-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下图展示的是在本地事务执行超时的情况下，Alpha事件扫描器会识别出Transaction B 执行超时，同时会发生&lt;strong&gt;TxAborted&lt;/strong&gt;事件终止整个Saga 事务，调用相关的恢复方法进行恢复。由于Alpha无法确认对应的本地事务的执行情况，Alpha会采用向Omega发送&lt;strong&gt;TxCompensated&lt;/strong&gt;的方式强制恢复事务，即使这时参与的服务B的本地事务已经执行成功了，Alpha还是会调用参与服务B的Omega来执行相关的恢复操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-saga-timeout.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;编写saga应用代码&quot;&gt;编写Saga应用代码&lt;/h3&gt;

&lt;p&gt;在文章开头我们给大家介绍了一个典型的分布式事务业务场景，其中涉及到一个初始服务，以及两个参与服务。 为了方便大家理解，我们将以&lt;a href=&quot;https://github.com/apache/servicecomb-pack/tree/master/demo/saga-spring-demo&quot;&gt;ServiceComb Pack Spring Demo&lt;/a&gt;为例介绍如何使用Saga实现分布式事务。这里预订服务(Booking) 相当于之前提到的分布式事务初始服务，对外提供一个租车(Car)和酒店(Hotel)聚合服务，在&lt;a href=&quot;https://github.com/apache/servicecomb-pack/blob/master/demo/saga-spring-demo/booking/src/main/java/org/apache/servicecomb/pack/demo/booking/BookingController.java&quot;&gt;BookingController&lt;/a&gt; 中使用Spring提供的&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html&quot;&gt;RestTemplate&lt;/a&gt; 向租车和酒店服务转发请求。租车和酒店服务分别作为Saga事务参与方参与整个事务。预订服务，租车和酒店服务都是基于&lt;a href=&quot;https://spring.io/projects/spring-boot&quot;&gt;Spring-Boot&lt;/a&gt;编写独立进程应用，应用代码通过&lt;a href=&quot;https://github.com/apache/servicecomb-pack/blob/master/omega/omega-spring-starter/src/main/java/org/apache/servicecomb/pack/omega/spring/EnableOmega.java&quot;&gt;@EnableOmega&lt;/a&gt;加载Omega相关的&lt;a href=&quot;https://github.com/apache/servicecomb-pack/blob/master/demo/saga-spring-demo/booking/src/main/resources/application.yaml&quot;&gt;配置&lt;/a&gt;，同时需要在Spring的配置文件中配置与Alpha服务相关的信息。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.pack.omega.spring.EnableOmega&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableOmega&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在应用代码中需要描述出Saga事务的边界，我们可以在BookingController的 order方法上标准@SagaStart；&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.pack.omega.context.annotations.SagaStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SagaStart&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/booking/{name}/{rooms}/{cars}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Calling the car service&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postForEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;carServiceUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/order/{name}/{cars}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Calling the hotel service&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postForEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hotelServiceUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/order/{name}/{rooms}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; booking &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; rooms and &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; cars OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;本地事务是通过@Compensable来标识， 并且在Compensable的compensationMethod属性中描述补偿方法。 注意补偿方法和本地事务方法的参数必须一致，否则Omega在系统启动进行参数检查的时候报找不到恢复方法的错误。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.pack.omega.transaction.annotations.Compensable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Compensable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compensationMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cancel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CarBooking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CarBooking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tcc实现&quot;&gt;TCC实现&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/servicecomb-pack&quot;&gt;ServiceComb Pack&lt;/a&gt; 还提供了一个名为TCC（Try-Cancel/Confirm实现)分布式事务协调实现。TCC借助两阶段提交协议提供了一种比较完美的恢复方式。在TCC方式下，cancel补偿显然是在第二阶段需要执行业务逻辑来取消第一阶段产生的后果。try是在第一阶段执行相关的业务操作，完成相关业务资源的占用，例如预先分配票务资源，或者检查并刷新用户账户信用额度。 在取消阶段释放相关的业务资源，例如释放预先分配的票务资源或者恢复之前占用的用户信用额度。 那我们为什么还要加入确认操作呢？这需要从业务资源的使用生命周期来入手。在try过程中，我们只是占用的业务资源，相关的执行操作只是出于待定状态，只有在确认操作执行完毕之后，业务资源才能真正被确认。&lt;/p&gt;

&lt;p&gt;在下图展示了正常的TCC调用流程，就是参与服务A，B分别在尝试方法中完成相关业务资源的预先分配，然后在提交阶段完成业务资源的确认操作。在实现层面和前面提到的Saga实现一样，我们需要协调器在分布式事务执行完成时向各个参与服务发送执行确认消息，由服务实例执行确认操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image-tcc-confirm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果参与服务在执行try方法出现错误，事务协调器Alpha会终止整个TCC分布式事务，同时事务协调器会向注册成功的参与服务发送取消消息，由服务实例执行取消操作。 假如这时还有其他的服务想参与到这个分布式事务的话， 事务协调器会以这个分布式事务已经失败为由，向参与的服务发送失败的应答消息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image-tcc-cancel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在ServiceComb Pack中，在为了实现上面描述的TCC业务述求，需要初始服务在分布式事务开始时向Alpha协调器发送&lt;strong&gt;TccStarted&lt;/strong&gt;事件，Alpha协调器在接收到&lt;strong&gt;TccStarted&lt;/strong&gt;事件之后，会创建相关事务追踪资源跟踪这个TCC事务整个生命周期。当在参与服务调用try方法前发送&lt;strong&gt;ParticipationStarted&lt;/strong&gt;事件来声明与TCC相关本地事务。Alpha协调器会根据TCC事务当前的状态决定是否允许后续的参与服务参加到TCC事务中。 如果参与的TCC事务没有终止，Alpha协调器会回复确认消息，参与服务会继续执行相关的try方法调用；如果TCC事务已经出错终止了，Alpha协调器会回复终止消息，参与服务所在的Omega将抛出异常，直接终止try方法调用。如果参与服务调用try方法成功，则会向Alpha发送&lt;strong&gt;ParticipationEnded&lt;/strong&gt;事件，因为这个事件发送之后Omega端不需要做任何操作，为了提高系统效率，Omega采用异步方式通知Alpha协调器。当初始服务执行完TCCStart所标注的方法之后， 初始服务所在的Omega会向Alpha协调器发送&lt;strong&gt;TccEnded&lt;/strong&gt;事件，Alpha协调器在接收到这个事件之后会查询与本次TCC调用相关的&lt;strong&gt;ParticipationStarted&lt;/strong&gt;事件识别相关的参与服务实例，然后通过向这些服务实例所对应的Omega发送&lt;strong&gt;Coordinated&lt;/strong&gt;事件，由Omega调用相关的确认方法，完成本地事务提交工作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-Tcc-confirm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当TCC调用执行过程中出现异常，初始服务所在的Omega会向Alpha协调器发送&lt;strong&gt;TccEnded&lt;/strong&gt;事件来终止当前的TCC事务。Alpha协调器则会根据其记录的TCC分布式事务的参与情况，向相关服务的Omega发送&lt;strong&gt;Coordinated&lt;/strong&gt;事件，由Omega调用相关的取消方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-Tcc-cancel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果参与服务在执行try方法出错了，那Alpha协调器会收到一条标注try方法执行状态的&lt;strong&gt;ParticipationEnded&lt;/strong&gt;事件，Alpha协调器会给自己发送一个包含Aborted信息的&lt;strong&gt;TccEnded&lt;/strong&gt;事件来关闭正在执行的TCC事务，同时触发Omega相关恢复操作的调用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-Tcc-exception.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面介绍参与服务本地事务执行超时的处理的设计， 对于参与服务的try方法来说，Alpha协调器可以通过是否接收到&lt;strong&gt;ParticipationEnded&lt;/strong&gt;事件判断参与服务try方法是否执行超时。 如果在超时时间内没有收到&lt;strong&gt;ParticipationEnded&lt;/strong&gt;事件，Alpha事件扫描器会向数据库添加&lt;strong&gt;TccEnded&lt;/strong&gt;信息，触发和之前描述一样的事务错误处理流程，关闭分布式事务以及调用Omega进行相关恢复的操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-Tcc-timeout.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同理当TCC分布式事务执行超时（Alpha在一定时间内没有收到TccEnded事件）， Alpha事件扫描器会发送&lt;strong&gt;TccEnded&lt;/strong&gt;终止整个TCC事务，触发与上面相同的恢复操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts2/image2-Tcc-timeout-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;编写tcc应用代码&quot;&gt;编写TCC应用代码&lt;/h3&gt;

&lt;p&gt;下⾯面我们会结合ServiceComb中的&lt;a href=&quot;https://github.com/apache/servicecomb-pack/tree/master/demo/tcc-spring-demo&quot;&gt;TCC示例&lt;/a&gt;，向大家介绍如何编写与TCC应用代码。这个示例以我们常见的电商场景为例，用户通过Ordering应用进行下单，Odering会调用Inventory以及Payment两个服务进行相关的业务操作。和之前Saga的示例一样，我们可以通过@EnableOmega的方式在这几个应用中注入Omega。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.pack.omega.spring.EnableOmega&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableOmega&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TccOrderingApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TccOrderingApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们需要在OrderingController中通过加入@TccStart来定义这个TCC分布式事务的范围，这个分布式事务的范围就是order方法，order方法会调用Inventory的order服务接口，以及Payment的pay服务接口。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.pack.omega.context.annotations.TccStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@TccStart&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/order/{userName}/{productName}/{productUnit}/{unitPrice}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unitPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Calling the inventory service&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postForEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;inventoryServiceUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/order/{userName}/{productName}/{productUnit}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productUnit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unitPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Calling the payment service&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postForEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentServiceUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/pay/{userName}/{amount}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; ordering &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; with &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productUnit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Inventory会在try阶段先进行库存的扣减，在分布式业务执行成功之后进行设置库存订单状态；如果业务执行失败，Inventory服务会执行恢复操作。通过定义@Participate，ServiceComb Omega可以标注相关try方法，同时通过confirmMethod 以及cancelMethod定义相关确认以及取消方法名。 这里需要注意的是这里提到的confirm，cancel方法的参数必须和try方法的相同。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.pack.omega.transaction.annotations.Participate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.annotation.Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Participate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;confirm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cancel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCredit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCredit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCredit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accountDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAndFlush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Insufficient funds!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cannot find the account!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConfirmed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;accountDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAndFlush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCredit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCredit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;accountDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAndFlush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConfirmed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Payment会在try阶段先验证用户账户的信用值，在确认阶段执行扣减用户账户余额的操作，在恢复阶段恢复信用值。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.servicecomb.pack.omega.transaction.annotations.Participate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.annotation.Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Participate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;confirm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cancel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductOrder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProductName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInStock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUnits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInStock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInStock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUnits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAndFlush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The Product is out of stock!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductOrder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConfirmed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductOrder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findProduceByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProductName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInStock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInStock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUnits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;productDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAndFlush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findProduceByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Product not exists at all!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;在本文中我们先从分布式事务场景入手，采用交互图的方式，向大家介绍分布式Saga以及TCC分布式事务协调协议交互，最后结合ServiceComb Pack所提供的示例向大家介绍如何编写Saga以及TCC的应用代码。&lt;/p&gt;</content><author><name>Willem Jiang</name><email>willemjiang@gmail.com</email><uri>http://willemjiang.github.io</uri></author><category term="Saga" /><category term="Pack" /><summary type="html">在本文中我们先从分布式事务场景入手，采用交互图的方式，向大家介绍分布式Saga以及TCC分布式事务协调协议交互，最后结合ServiceComb Pack所提供的示例向大家介绍如何编写Saga以及TCC的应用代码。</summary></entry><entry xml:lang="cn"><title type="html">基于服务的分布式事务(上篇)</title><link href="/cn/docs/distributed-transaction-of-services-1/" rel="alternate" type="text/html" title="基于服务的分布式事务(上篇)" /><published>2019-01-10T00:00:00+08:00</published><updated>2019-01-10T15:30:43+08:00</updated><id>/cn/docs/distributed-transaction-of-services-1</id><content type="html" xml:base="/cn/docs/distributed-transaction-of-services-1/">&lt;h3 id=&quot;传统数据库事务&quot;&gt;传统数据库事务&lt;/h3&gt;

&lt;p&gt;在传统单体应用架构下，我们通常会将业务数据存储在一个数据库中，应用各模块直接对数据库进行操作业务数据。由数据库提供基于&lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt;的事务保证，这里的A是Atomic原子性的简称（事务作为整体来执行，要么全部执行，要么都不执行）； C是Consistency一致性的简称（事务应确保数据从一个一致的状态转变为另一个一致的状态）；I是 Isolation 隔离性的简称 （多个事务并发执行时，一个事务的执行不应影响其他事务的执行）； D是Durability持久性的简称（已提交的事务修改数据会被持久保持）。&lt;/p&gt;

&lt;p&gt;例如一个电商的下单操作，就涉及到用户系统，库存系统，支付系统以及配送系统一系列的协同操作。我们在执行下单操作的过程中，如果出现库存短缺，或者用户账户余额不足的情况，这个下单操作涉及到一系列的业务系统调用。如果这些子系统连接的一个数据库，我们可以通过数据库提供的事务原子性机制将库存数量校验以及用户余额校验的工作，和执行具体的下单业务操作组合成为一个数据库事务操作。通过数据库事务原子性来保证系统各个模块的调用要么都成功，要么都失败（取消）。 同时由于数据库提供一致性，和持久性保证，保证了如果事务执行成功并提交，本次业务操作的数据是立即生效的同时不会产生异议。 同时数据库提供了不同级别的数据锁机制保证应用多个线程同时读取或者更新数据的过程中不会相互影响，从而来保证业务操作的隔离性。&lt;/p&gt;

&lt;h3 id=&quot;微服务的分布式事务&quot;&gt;微服务的分布式事务&lt;/h3&gt;

&lt;p&gt;随着微服务架构的流行，很多大型的业务流程被拆分成为了多个功能单一的基础服务，大家会根据业务的述求在这些基础服务之上编写一些组合调用服务以满足业务述求。 为了保证微服务能够独立开发部署运行， 通常我们会采用一个微服务一个数据库的架构，将内部数据经微服务封装之后，以服务方式对外暴露。 这样以往基于数据库来实现的数据操作，就变成了多个对外提供服务的微服务系统的协同完成操作。因为单个微服务只知道自己的服务执行情况，为了保证分布事务的一致性，参与分布式事务的微服务通常会依托协调器完成相关的&lt;a href=&quot;https://www.enterpriseintegrationpatterns.com/patterns/conversation/CoordinatedAgreement.html&quot;&gt;一致性协调操作&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在十多年前分布式事务的实现方案有 CORBA的 Object Transaction Service（OTS), J2EE的 Java Transaction API 以及 Java Transaction Service。这些事务管理以及事务服务的技术都是建立在&lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt;事务的概念上的。协调器依托于底层的资源交互协议实现资源的占用以及提交的操作，通过&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4&quot;&gt;两阶段提交&lt;/a&gt;的方式实现分布式事务的强一致操作。两阶段提交将分布式事务操作分为准备和提交两个阶段：系统在准备解决阶段完成资源操作， 如果准备阶段中出现问题，支持回滚操作，但是在提交阶段是不允许出错的。两阶段在保证事务原子性上做了很多工作，但是两阶段提交的最大的问题是在分布式事务执行过程中， 所有参与事务的节点资源都是被锁定的, 系统不允许其他节点访问锁定的资源，在这种执行下很难进一步提升系统的执行效率。&lt;/p&gt;

&lt;p&gt;如前文所述在&lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt;的事务执行过程中，为了保证事务的隔离性，通常我们会采用读写加锁的方式，通过串行处理数据方式，保证多个事务在同时执行的过程中不会相互影响。也就是说只有当事务提交并且保存修改记录或者回退取消修改记录之后，其他的事务才能继续执行。然后对于由多个事务组成的长时间运行的事务来说，如果在整个事务的执行过程都采用这锁机制来保证事务的隔离性是一种很低效的解决方案。&lt;/p&gt;

&lt;p&gt;那我们有什么办法即提高系统运行效率，又能保证事务的数据一致性呢？这里的答案是采用补偿的方式来解决这一问题。&lt;/p&gt;

&lt;h3 id=&quot;基于补偿的事务实现&quot;&gt;基于补偿的事务实现&lt;/h3&gt;

&lt;p&gt;补偿是指我们将一个事务分成一个本地执行的正常操作事务和一个逻辑上对之前的操作进行补偿的事务。这样采用补偿事务的方式，我们可以把一个长时间运行的事务变成了若干个可以立即提交的本地事务调用，而不是一个长时间占用锁资源的巨型事务。 这样做的最大好处就是极大降低锁占用的时间。作为代价，补偿方式的取消操作和以往的实现方式有很大的不同，我们需要执行一个单独的&lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt;事务来完成对之前已提交的事务的逻辑补偿。&lt;/p&gt;

&lt;p&gt;下图展示了一个典型的分布式事务调用， 用户请求触发事务初始服务， 事务初始服务会顺序调用两个事务参与服务（服务A，服务B）。由于这两个事务参与服务之间没有联系，当事务参与服务执行出现了问题，需要一个协调器参与相关的恢复操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts1/image-distributed-transaction.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里我们可以根据补偿执行的不同将其分成两组不同的补偿方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不完美补偿 - 反向操作会留下之前原始事务操作的痕迹，一般来说我们是会在原始事务记录中设置取消状态。&lt;/li&gt;
  &lt;li&gt;完美补偿 - 反向逻辑会彻底清理之前的原始事务操作，一般来说是不会保留原始事务交易记录，用户是感知不到事务取消之前的状态信息的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于采用不完美的补偿方式的系统（&lt;a href=&quot;https://microservices.io/patterns/data/saga.html&quot;&gt;Saga&lt;/a&gt;实现）来说，我们的补偿事务逻辑其他的事务逻辑相比没有什么不同， 系统只需要像执行其他业务逻辑一样执行相关的补偿操作即可。系统不需要设置特殊的处理逻辑来恢复事务执行之前的状态。以我们常见的银行ATM取款业务为例，银行账户预先进行扣减的操作，如果取款不成功，其逻辑恢复操作就是通过冲正的方式将预先扣减的款项打回到用户账户，我们可以通过查看账户的交易记录找到扣减和冲正的记录信息。下图展示的内容就是当初始服务调用分别调用服务A和服务B，服务B执行出现错误，这个时候我们事务协调器会调用服务A的冲正方法将系统状态恢复到执行服务调用之前的状态。&lt;/p&gt;

&lt;p&gt;对于采用完美补偿方式的系统（&lt;a href=&quot;https://dzone.com/articles/transactions-for-the-rest-of-us&quot;&gt;Try-Cancel/Confirm&lt;/a&gt;实现)来说，为了让系统能够在补偿操作彻底清除事务执行的情况，我们会借助两阶段提交协议来完成这部分的功能。在TCC方式下，cancel补偿显然是在第二阶段需要执行业务逻辑来取消第一阶段产生的后果。try是在第一阶段执行相关的业务操作，完成相关业务资源的占用，例如预先分配票务资源，或者检查并刷新用户账户信用额度。 在cancel阶段释放相关的业务资源，例如释放预先分配的票务资源或者恢复之前占用的用户信用额度。 那我们为什么还要加入confirm操作呢？这需要从业务资源的使用生命周期来入手。在try过程中，我们只是占用的业务资源，相关的执行操作只是出于待定状态，只有在确认操作执行完毕之后，业务资源才能真正被确认。例如订票业务的try操作，我们只是占用了相关的票务资源。目的是防止票务资源被其他用户占用，但是业务还没有执行完毕，票务提供方还不能将被占用的票务资源统计为已售出票务。 只有相关票务资源被确认售出的之后，票务提供方才能将其统计为已售出票务资源。&lt;/p&gt;

&lt;h3 id=&quot;servicecomb-pack架构介绍&quot;&gt;ServiceComb Pack架构介绍&lt;/h3&gt;

&lt;p&gt;通过上面的分析我们可以发现一个有意思的现象，每一步事务的操作都有可能会根据业务的执行情况提供一个补偿操作，通过一个事务管理系统来协调这个补偿操作可以帮我们大大降低业务流程建模的复杂度。在分布式事务实现过程中， 协调器的作用非常重要， 各个事务的参与方需要跟协调器建立好良好的沟通， 由协调器统一调度完成相关事务的执行或者取消的操作。&lt;/p&gt;

&lt;p&gt;ServiceComb Pack架构如下图所示，主要包含两个组件，即Alpha和Omega，其中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alpha充当协调者的角色，主要负责对事务的事件进行持久化存储以及协调子事务的状态，使其最终得以与全局事务的状态保持一致，即保证事务中的子事务要么全执行，要么全不执行。&lt;/li&gt;
  &lt;li&gt;Omega是微服务中内嵌的一个agent，负责对监控本地事务执行情况并向Alpha上报事务执行事件，并在异常情况下根据alpha下发的指令执行相应的补偿或重试操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts1/image-pack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Omega可以通过向alpha发送消息的方式向alpha实时传递事务执行的进展， 但是Alpha怎么知道这些Omega上传的消息是相互关联的呢？我们通过在服务调用过程中插入唯一的全局事务ID，并在后续的调用其它服务过程中传递这个全局事务ID。通过全局事务ID可以从汇总到Alpha事件中找到事件与之相关联的所有事件，通过对这些事件信息进行分析，我们可以完整地追踪到与分布式事务执行情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts1/image-transactions-correlation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Omega会以切面编程的方式向应用程序注入相关的处理模块，帮助我们构建分布式事务调用的上下文。 Omega在事务处理初始阶段处理事务的相关准备的操作，在事务执行完毕做一些清理的操作，例如创建分布式事务起始事件，以及相关的子事件， 根据事务的执行的成功或者失败生产相关的事务终止或者失败事件。这样带来的好处是用户的代码只需要添加几个annotation 来描述分布式事务执行范围，以及与本地的事务处理恢复的相关函数信息，Omega就能通过切面注入的代码能够追踪与本地事务的执行情况。 Omega会将本地事务执行的情况以事件的方式通知给Alpha。 由于单个Omega不可能知晓一个分布式事务下其他参与服务的执行情况， 这样就需要Alpha扮演一个十分重要的协调者的角色。Alpha将收集到的分布式事务事件信息整理汇总，通过分析这些事件之间的关系可以了解到分布式事务的执行情况， Alpha通过向Omega下发相关的执行指令由Omega执行相关提交或恢复操作，实现分布式事务的最终一致性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts1/image-Omega-Implementation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在了解的Pack实现的部分细节之后， 我们可以从下图进一步了解ServiceComb Pack架构下，Alpha与Omega内部各模块之间的关系图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dts1/image-pack-system-archecture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整个架构分为三个部分，一个是&lt;strong&gt;Alpha协调器&lt;/strong&gt;（支持多个实例提供高可用支持），另外一个就是注入到微服务实例中的&lt;strong&gt;Omega&lt;/strong&gt;，以及Alpha与Omega之间的&lt;strong&gt;交互协议&lt;/strong&gt;， 目前ServiceComb Pack支持Saga 以及TCC两种分布式事务协调协议实现。&lt;/p&gt;

&lt;p&gt;Omega包含了与分析用户分布式事务逻辑相关的 &lt;strong&gt;事务注解模块&lt;/strong&gt;（Transaction Annotation） 以及 事务拦截器（Transaction Interceptor）； 分布式事务执行相关的&lt;strong&gt;事务上下文&lt;/strong&gt;（Transaction Context），&lt;strong&gt;事务回调&lt;/strong&gt;（Transaction Callback) ，&lt;strong&gt;事务执行器&lt;/strong&gt; （Transaction Executor）；以及负责与Alpha进行通讯的&lt;strong&gt;事务传输&lt;/strong&gt;（Transaction Transport）模块。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事务注解&lt;/strong&gt;模块是分布式事务的用户界面，用户将这些标注添加到自己的业务代码之上用以描述与分布式事务相关的信息，这样Omega就可以按照分布式事务的协调要求进行相关的处理。如果大家扩展自己的分布式事务，也可以通过定义自己的事务标注来实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事务拦截器&lt;/strong&gt;这个模块我们可以借助AOP手段，在用户标注的代码基础上添加相关的拦截代码，获取到与分布式事务以及本地事务执行相关的信息，并借助&lt;strong&gt;事务传输&lt;/strong&gt;模块与Alpha进行通讯传递事件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事务上下文&lt;/strong&gt;为Omega内部提供了一个传递事务调用信息的一个手段，借助前面提到的全局事务ID以及本地事务ID的对应关系，Alpha可以很容易检索到与一个分布式事务相关的所有本地事务事件信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事务执行器&lt;/strong&gt;主要是为了处理事务调用超时设计的模块。由于Alpha与Omega之间的连接有可能不可靠，Alpha端很难判断Omega本地事务执行超时是由Alpha与Omega直接的网络引起的还是Omega自身调用的问题，因此设计了事务执行器来监控Omega的本地的执行情况，简化Omega的超时操作。目前Omega的缺省实现是直接调用事务方法，由Alpha的后台服务通过扫描事件表的方式来确定事务执行时间是否超时。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事务回调&lt;/strong&gt; 在Omega与Alpha建立连接的时候就会向Alpha进行注册，当Alpha需要进行相关的协调操作的时候，会直接调用Omega注册的回调方法进行通信。 由于微服务实例在云化场景启停会很频繁，我们不能假设Alpha一直能找到原有注册上的事务回调， 因此我们建议微服务实例是无状态的，这样Alpha只需要根据服务名就能找到对应的Omega进行通信。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事务传输模块&lt;/strong&gt;负责Omega与Alpha之间的通讯，在具体的实现过程中，Pack通过定义相关的Grpc&lt;a href=&quot;https://github.com/apache/servicecomb-pack/tree/master/pack-contracts/pack-contract-grpc/src/main/proto&quot;&gt;描述接口文件&lt;/a&gt;定义了TCC 以及Saga的事务交互方法， 同时也定义了与交互相关的事件。我们借助了Grpc所提供的双向流操作接口实现了Omega与Alpha之间的相互调用。 Omega和Alpha的传输建立在Grpc多语言支持的基础上，为实现多语言版本的Omega奠定了基础。&lt;/p&gt;

&lt;p&gt;Alpha为了实现其事务协调的功能，首先需要通过&lt;strong&gt;事务传输&lt;/strong&gt;（Transaction Transport）接收Omega上传的事件， 并将事件存在&lt;strong&gt;事件存储&lt;/strong&gt;（Event Store）模块中，Alpha通过&lt;strong&gt;事件API&lt;/strong&gt; (Event API）对外提供事件查询服务。Alpha会通过&lt;strong&gt;事件扫描器&lt;/strong&gt;（Event Scanner）对分布式事务的执行事件信息进行扫描分析，识别超时的事务，并向Omega发送相关的指令来完成事务协调的工作。由于Alpha协调是采用多个实例的方式对外提供高可用架构， 这就需要&lt;strong&gt;Alpha集群管理器&lt;/strong&gt;（Alpha Cluster Manger）来管理Alpha集群实例之前的协调。用户可以通过&lt;strong&gt;管理终端&lt;/strong&gt;（Manage console）对分布式事务的执行情况进行监控。&lt;/p&gt;

&lt;p&gt;目前Alpha的&lt;strong&gt;事件存储&lt;/strong&gt;是构建在数据库基础之上的。为了降低系统实现的复杂程度，Alpha集群的高可用架构是建立在数据库集群基础之上的。 为了提高数据库的查询效率，我们会根据事件的全局事务执行情况的装将数据存储分成了在线库以及存档库，将未完成的分布式事务事件存储在在线库中， 将已经完成的分布式事务事件存储在存档库中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事件API&lt;/strong&gt;是Alpha对外暴露的Restful事件查询服务。 这模块功能首先应用在&lt;a href=&quot;https://github.com/apache/servicecomb-pack/tree/master/acceptance-tests&quot;&gt;Pack的验收测试&lt;/a&gt;中，通过事件API验收测试代码可以很方便的了解Alpha内部接收的事件。验收测试通过模拟各种分布式事务执行异常情况（错误或者超时），比对Alpha接收到的事务事件来验证相关的其事务协调功能是否正确。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;管理终端&lt;/strong&gt;是一个js的前端界面， &lt;strong&gt;管理终端&lt;/strong&gt;通过访问&lt;strong&gt;事件API&lt;/strong&gt;提供的Rest服务，向用户提供是分布式事务执行情况的统计分析，并且可以追踪单个全局事务的执行情况，找出事务的失败的根源。在Pack 0.3.0 中实现了一部分功能，后续还需要进一步完善，欢迎大家参与进来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha集群管理器&lt;/strong&gt;负责Alpha实例注册工作，管理Alpha中单个服务的执行情况， 并且为Omega提供一个及时更新的服务列表。 通过集群管理器用户可以轻松实现Alpha服务实例的启停操作，以及Alpha服务实例的滚动升级功能。目前这部分的模块还在设计开发中，欢迎对此有兴趣的朋友加入到我们的开发队伍中来。&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;本文从分布式事务需要解决的问题入手，向大家介绍了建立在补充基础之上的基于服务的分布式事务的解决思路。接下来我们结合具体的示例介绍了完美的补偿（TCC）和非完美补偿（Saga）两种分布式事务协调协议，最后结合ServiceComb Pack的实现原理详细介绍了ServiceComb Pack的架构实现。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../distributed-transaction-of-services-2/&quot;&gt;基于服务的分布式事务下篇&lt;/a&gt;中，我们结合具体的示例向大家介绍TCC以及Saga分布式事务协调协议的交互细节，以及如何使用ServiceComb Pack编写TCC 以及Saga 应用。&lt;/p&gt;</content><author><name>Willem Jiang</name><email>willemjiang@gmail.com</email><uri>http://willemjiang.github.io</uri></author><category term="Saga" /><category term="Pack" /><summary type="html">本文从分布式事务需要解决的问题入手，向大家介绍了建立在补充基础之上的基于服务的分布式事务的解决思路。接下来我们结合具体的示例介绍了完美的补偿（TCC）和非完美补偿（Saga）两种分布式事务协调协议，最后结合ServiceComb Pack的实现原理详细介绍了ServiceComb Pack的架构实现。</summary></entry><entry xml:lang="cn"><title type="html">Apache ServiceComb 社区联合传智播客黑马程序员、博学谷、传智汇子品牌发布微服务化教程</title><link href="/cn/docs/chuanzhiboke-servicecomb-tutoria-release/" rel="alternate" type="text/html" title="Apache ServiceComb 社区联合传智播客黑马程序员、博学谷、传智汇子品牌发布微服务化教程" /><published>2019-01-07T00:00:00+08:00</published><updated>2019-01-07T15:30:43+08:00</updated><id>/cn/docs/chuanzhiboke-servicecomb-tutoria-release</id><content type="html" xml:base="/cn/docs/chuanzhiboke-servicecomb-tutoria-release/">&lt;p&gt;2018年12月23日，Apache ServiceComb社区联合传智播客黑马程序员、博学谷和传智汇子品牌，共同发起的Apache ServiceComb 技术课程共建暨技术资源共享发布仪式在北京环球财讯中心成功举行。&lt;/p&gt;

&lt;p&gt;Apache ServiceComb是华为云微服务引擎CSE的核心。全球最大的软件基金会Apache于2018年10月24日宣告Apache ServieComb毕业，成为全球首个Apache微服务顶级项目。在北京举办的“第八届云计算标准和应用大会”上，Apache ServiceComb 凭借技术发展潜力，活跃程度和受关注程度等， 荣获中国开源云联盟（COSCL）组织的“中国优秀开源项目一等奖”。ServiceComb致力于帮助企业、用户及开发者将企业应用轻松微服务化上云并实现对微服务应用的高效运维管理。&lt;/p&gt;

&lt;p&gt;本次启动仪式由华为开源软件能力中心技术专家姜宁、华为开源软件能力中心企业应用微服务化工程师马彬、传智汇运营总监王平、博学谷运营总监汤阳光共同发布。华为开源能力中心技术专家姜宁表示，非常感谢传智汇为IT人提供这样难得的资源交流机会，让技术和资源在此交流和共享。希望IT人在Apache ServiceComb社区及平台获得更好的成长和发展。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chuanzhiboke-servicecomb-tutoria-release.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Mabin</name></author><category term="微服务" /><category term="课程" /><summary type="html">传智播客与Apache ServiceComb课程及技术资源共建仪式圆满结束</summary></entry><entry xml:lang="en"><title type="html">Apache ServiceComb community joint chuanzhiboke sub-brand Itheima, Boxuegu and Wisdom Gathering release micro-service tutorial</title><link href="/docs/chuanzhiboke-servicecomb-tutoria-release/" rel="alternate" type="text/html" title="Apache ServiceComb community joint chuanzhiboke sub-brand Itheima, Boxuegu and Wisdom Gathering release micro-service tutorial" /><published>2019-01-07T00:00:00+08:00</published><updated>2019-01-07T15:30:43+08:00</updated><id>/docs/chuanzhiboke-servicecomb-tutoria-release</id><content type="html" xml:base="/docs/chuanzhiboke-servicecomb-tutoria-release/">&lt;p&gt;On December 23, 2018, the Apache ServiceComb community jointly Chuanzhiboke  sub-brand Itheima, Boxuegu and Wisdom Gathering, and jointly launched the Apache ServiceComb technical course joint construction and technical resource sharing release ceremony successfully held at Beijing Global Financial Center.&lt;/p&gt;

&lt;p&gt;Apache ServiceComb is the core of Huawei Cloud microservices engine CSE. Apache, the world’s largest software foundation. announced on October 24, 2018 that Apache ServieComb graduated and became the world’s first Apache microservice top level project. At the 8th Cloud Computing Standards and Applications Conference held in Beijing, Apache ServiceComb won the first prize of China Excellent Open Source Project organized by China Open Source Cloud Alliance (COSCL) due to its technological development potential, activity level and degree of attention. “. ServiceComb is committed to helping enterprises, users and developers to easily micro-service enterprise applications to the cloud and achieve efficient operation and management of micro-service applications.&lt;/p&gt;

&lt;p&gt;The launching ceremony was jointly released by Huawei Open Source Software  Competence Center technical expert Jiang Ning, Huawei Open Source Software Competence Center enterprise application micro-service engineer Ma Bin, Wisdom Gathering’s operation director Wang Ping, and Boxuegu’s operation director Tang Yangguang. Jiang Ning, a technical expert at Huawei Open Source Software  Competence Center, said that he is very grateful to Chuanzhiboke for providing such a rare resource exchange opportunity for IT people to exchange technology and resources. I hope that IT people will get better growth and development on Apache ServiceComb community and platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chuanzhiboke-servicecomb-tutoria-release.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Mabin</name></author><category term="microservice" /><category term="course" /><summary type="html">Chuanzhiboke and Apache ServiceComb course and technical resources co-construction ceremony ended successfully</summary></entry><entry xml:lang="cn"><title type="html">Apache ServiceComb开源微服务社区介绍</title><link href="/cn/docs/apache-servicecomb-introduction-slides/" rel="alternate" type="text/html" title="Apache ServiceComb开源微服务社区介绍" /><published>2018-12-29T00:00:00+08:00</published><updated>2018-12-29T17:18:43+08:00</updated><id>/cn/docs/apache-servicecomb-introduction-slides</id><content type="html" xml:base="/cn/docs/apache-servicecomb-introduction-slides/">&lt;p&gt;&lt;strong&gt;《Apache ServiceComb开源微服务社区介绍》&lt;/strong&gt;
&lt;a href=&quot;/assets/slides/20181229/1_ApacheServiceComb_Community_Introduction.pdf&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;社区入门，介绍Apache ServiceComb开源微服务社区概貌、总体架构、技术生态及社区总结。&lt;/p&gt;</content><author><name>Mabin</name></author><category term="微服务" /><category term="PDF" /><summary type="html">Apache ServiceComb开源微服务社区介绍PDF</summary></entry><entry xml:lang="cn"><title type="html">开源项目没有那么遥远</title><link href="/cn/docs/opensource-project-is-not-so-far-away/" rel="alternate" type="text/html" title="开源项目没有那么遥远" /><published>2018-11-20T00:00:00+08:00</published><updated>2018-11-20T12:00:00+08:00</updated><id>/cn/docs/opensource-project-is-not-so-far-away</id><content type="html" xml:base="/cn/docs/opensource-project-is-not-so-far-away/">&lt;h2 id=&quot;开源项目没有那么遥远&quot;&gt;开源项目没有那么遥远&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;前几天收到了Apache ServiceComb PMC的邀请邮件，这意味着我成为了一名Apache ServiceComb项目的Committer。喜悦之余，我想留下一篇博客作为自己工作的一个阶段性总结，同时也希望这篇文章能够给其他想要加入到开源社区的同学一点参考。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;初次接触servicecomb&quot;&gt;初次接触ServiceComb&lt;/h3&gt;

&lt;p&gt;最开始接触到“开源”的概念是在大学的计算机课程上，当时对于开源项目的印象就是：开源项目是由一群大牛程序员开发和维护的，作为小白的我只需要拿来用就好了。&lt;/p&gt;

&lt;p&gt;毕业之后参加工作，我被分到了一个跟开源项目相关的工作组，需要向&lt;a href=&quot;https://servicecomb.apache.org/cn/&quot; title=&quot;ServiceComb官网&quot;&gt;Apache ServiceComb项目&lt;/a&gt;提交代码。当时的心情真是既新奇又紧张，毕竟以前只是单纯地使用过开源软件，而现在自己终于要向开源软件项目提交代码了。这种能够在一个开源项目中提交自己代码的兴奋感，相信很多学软件专业的同学应该能够理解。但是自己又是刚开始工作的小白，担心自己写的代码太差了拿不出手，因此又紧张不已。而事实上我第一次提交代码的经过并没有预想中的那么多波折，作为一个开源小白，提上去的pull request有瑕疵是很正常的事情，根据检视者的意见修改好了就行——毕竟高手不一定高冷，社区的开发者们都是很热心的。&lt;/p&gt;

&lt;p&gt;有了第一次提交PR的经历后，后面的工作就慢慢变得轻车熟路了。平常我在开源社区主要做的就是领一些新特性或者修复bug的&lt;a href=&quot;https://issues.apache.org/jira/projects/SCB/issues&quot; title=&quot;Apache issues&quot;&gt;issue&lt;/a&gt;处理，提交代码或文档的修改。&lt;/p&gt;

&lt;h3 id=&quot;参与的方式不仅仅是写代码&quot;&gt;参与的方式不仅仅是写代码……&lt;/h3&gt;

&lt;p&gt;如前文所提到的，最初我参与Apache ServiceComb开源项目的内容是由工作驱动的。因为有一些新特性要完成，或者因为有一些bug要修复，所以我需要提交代码和更新相关文档。而在代码和文档之外的其他事务我并没有参与多少。&lt;/p&gt;

&lt;p&gt;其实从我开始向ServiceComb提交代码时，我就订阅了&lt;a href=&quot;https://servicecomb.apache.org/cn/developers/subscribe-mail-list/&quot; title=&quot;订阅邮件&quot;&gt;Apache ServiceComb的邮件列表&lt;/a&gt;，也加入了&lt;a href=&quot;https://servicecomb.apache.org/cn/developers/use-gitter/&quot; title=&quot;使用Gitter&quot;&gt;Gitter聊天室&lt;/a&gt;。不过由于对自己的技术没什么自信，也受限于内向的性格，我在这些沟通渠道内长期保持着旁观的状态。当时的想法是，讨论ServiceComb设计和发展的事情我又参与不了，看看大佬们讨论就可以，到时候我再捞几个issue来做就好了。然而这种想法是不对的，对于我们自身在开源社区中的发展也没有好处。要参与开源社区的事务，仅仅只是埋头提交代码是不够的，积极参与社区的讨论、沟通，保持自己在社区中的活跃度，也是评判自己在社区工作好坏的一项标准。这也符合Apache之道中“社区胜于代码”的理念。此外，把将要进行的事情放到邮件中讨论，也是一个文档归档的过程。后续想要回溯某个特性为什么会被加进来，或者某个bug是如何触发的时候，搜索相关的邮件就可以了。如果有新的贡献者想要参与到社区开发工作中来，他们也可以通过查阅邮件来了解很多信息。这在无形中节省了很多后续的维护和沟通成本。&lt;/p&gt;

&lt;p&gt;参与社区讨论的活跃程度也是评判一个开发者能否成为committer的重要标准。听先前已经进入ServiceComb社区的同事说，其实按照我的代码提交量来看，在之前我就可以成为committer了，然而由于我在社区沟通中的活跃度实在是太低了，所以才一直没有受到ServiceComb PMC的committer邀请……所以说，同学们一定不要被自己的腼腆性格坑了啊，要参与社区事务，就需要更积极地加入到讨论中来。&lt;/p&gt;

&lt;h3 id=&quot;给有意者的一些建议&quot;&gt;给有意者的一些建议&lt;/h3&gt;

&lt;p&gt;参与一个开源项目，对于自己阅读文档、分析源码、开发和沟通的能力都有很大的益处。这和开发一个业务系统是两种完全不同的体验，对于拓展个人的视野和经验很有帮助。如果进一步成为Apache committer，还有一些额外的福利哦，例如：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;合入PR的权限：普通的贡献者只能等待其他committer来检视代码和帮你合入PR。如果你自己就是一名committer的话，那么你就有了合入PR的权限了；而且在你提交PR的时候，不用再像以前一样被动等待其他人来检视，你可以在Github的PR页面主动选择要求其他committer帮你检视代码，被你at到的committer会收到提醒检视的邮件，这样更快捷。&lt;/li&gt;
  &lt;li&gt;JetBrains开源license：如果你是一名Java开发人员，相信你应该听说过JetBrains的Intellij IDEA吧？IDEA有社区版和商业版之分，商业版的功能更丰富，不过需要付费使用。如果你成为了一个Apache项目的committer，那么你就可以申请Open Source License，免费使用商业版的IDEA，或者其他工具（如Goland）了。&lt;/li&gt;
  &lt;li&gt;技术水平的认可：成为Apache Committer本身就是一件可以证明你的技术能力的事情。在&lt;a href=&quot;http://people.apache.org/committer-index.html&quot; title=&quot;Apache committer index&quot;&gt;Apache Committer 列表&lt;/a&gt;页面，你可以看到所有的Apache Committer，表格的第三列显示了各个committer所参与的项目。当你参与的项目足够多时，还能成为Apache member，帮助大家孵化开源项目，这个层次相当于比普通committer更进一步了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果想要参与到一个开源项目中，可以首先了解一下如何使用这个项目。给开源社区做贡献的方式不仅仅限于提交代码，&lt;a href=&quot;https://github.com/apache/servicecomb-docs&quot; title=&quot;ServiceComb文档项目&quot;&gt;修复文档问题&lt;/a&gt;可能是一个更好的切入点。通过阅读和修复文档问题，我们可以了解到一个项目的主要特性，这对于我们进一步了解项目源码也是很有帮助的。&lt;/p&gt;

&lt;p&gt;同时，&lt;a href=&quot;https://servicecomb.apache.org/cn/developers/subscribe-mail-list/&quot; title=&quot;订阅邮件&quot;&gt;订阅邮件列表&lt;/a&gt;和&lt;a href=&quot;https://servicecomb.apache.org/cn/developers/use-gitter/&quot; title=&quot;使用Gitter&quot;&gt;使用Gitter&lt;/a&gt;也很有必要。通过这些，我们不仅可以了解到项目的最新动态，也能够参与到社区的讨论中来。如果还不了解如何发起一场讨论的话，可以先看看社区里的开发者是怎么做的，参与到其他人的邮件讨论中去。碰到其他的使用者提问也可以上去帮助解答，这同样是一种参与贡献的方式。上文已经提到过了，参与讨论沟通是社区活动的重要内容。不用感到不好意思，开源社区本身就是开放的，我们欢迎更多的人能够参与到项目的建设中来。&lt;/p&gt;

&lt;p&gt;正所谓临渊羡鱼，不如退而结网。与其羡慕已经成功参与到开源项目中的同学，不如从现在开始行动，选择一个开源项目参与进去 ; )&lt;/p&gt;

&lt;p&gt;文章的最后，我想向给与我帮助和鼓励的社区团队成员致以感谢，谢谢大家热心的帮助和指导，让我从一名小白成长为Apache committer。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps：在这里小小地安利一下，&lt;a href=&quot;https://servicecomb.apache.org/cn/&quot; title=&quot;ServiceComb官网&quot;&gt;Apache ServiceComb项目&lt;/a&gt;已经从Apache孵化器毕业，正式成为Apache顶级项目，这也是业界首个微服务项目在Apache孵化并毕业成为顶级项目。ServiceComb包含的几个子项目都处于如火如荼的发展势头中，欢迎大家参与到ServiceComb社区建设中来~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;附committer权限设置步骤&quot;&gt;附：committer权限设置步骤&lt;/h2&gt;

&lt;p&gt;当你收到Apache ServiceComb PMC的邀请邮件，这就意味着你的努力已经获得了PMC的认可，你可以选择成为committer了！建议你仔细阅读一遍邀请邮件，按照上面的指导来进行操作。这里我简要介绍一下我的操作步骤。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;签署iCLA&lt;br /&gt;
在成为committer之前，你需要先确保自己已经&lt;a href=&quot;http://www.apache.org/licenses/#clas&quot; title=&quot;Contributor License Agreements&quot;&gt;签署iCLA&lt;/a&gt;。如果没有的话，可以先去&lt;a href=&quot;http://www.apache.org/licenses/icla.pdf&quot; title=&quot;下载ICLA文件&quot;&gt;下载一份iCLA pdf文件&lt;/a&gt;，注意&lt;code class=&quot;highlighter-rouge&quot;&gt;(optional) Public name&lt;/code&gt;一栏填写自己的github id。注意这份PDF文件需要签名，签名内容是&lt;code class=&quot;highlighter-rouge&quot;&gt;Full Name&lt;/code&gt;那一栏的你填的内容。&lt;br /&gt;
将签署好了的iCLA文件按照&lt;a href=&quot;http://www.apache.org/licenses/#submitting&quot; title=&quot;提交iCLA文件&quot;&gt;iCLA文件提交说明&lt;/a&gt;发送给&lt;code class=&quot;highlighter-rouge&quot;&gt;secretary@apache.org&lt;/code&gt;，等待回信即可完成签署流程。&lt;/li&gt;
  &lt;li&gt;回复PMC的邀请邮件&lt;br /&gt;
完成iCLA的签署后，就可以在Apache PMC的邀请邮件上回复了，回复邮件发给&lt;code class=&quot;highlighter-rouge&quot;&gt;private@servicecomb.apache.org&lt;/code&gt;，你需要说明自己接受邀请，并且告诉PMC你所想要使用的Apache id。已经被人申请了的Apache ID在&lt;a href=&quot;http://people.apache.org/committer-index.html&quot; title=&quot;Apache committer index&quot;&gt;这里&lt;/a&gt;都可以查到，选择的时候需要选一个还没有被人使用的id。&lt;/li&gt;
  &lt;li&gt;初始化Apache帐户密码&lt;br /&gt;
当收到Apache帐户创建成功的邮件（标题为&lt;code class=&quot;highlighter-rouge&quot;&gt;Welcome to the Apache Software Foundation (ASF)!&lt;/code&gt;）时，你的Apache帐号就创建成功了，记得按照邮件中的提示，去设置一下自己的密码。重置密码的过程中需要使用你在签署iCLA时填写的邮箱地址。&lt;/li&gt;
  &lt;li&gt;设置committer权限&lt;br /&gt;
committer账号设置完成后，你还需要设置对Github上托管的Apache ServiceComb项目的仓库权限进行设置，设置流程可以参考&lt;a href=&quot;https://servicecomb.apache.org/cn/developers/setup-committer-rights/&quot; title=&quot;Committer权限设置&quot;&gt;这篇博客&lt;/a&gt;。需要补充的一点是，在对Github账号授权时，需要开启&lt;a href=&quot;https://github.com/settings/two_factor_authentication/intro&quot; title=&quot;Github双因子认证&quot;&gt;双因子认证&lt;/a&gt;，国内的同学只能选择使用双因子认证APP来做认证了。除了Github介绍页面上推荐的Authy、1Password和LastPass Authenticator，也可以使用Google的身份验证器，在APP store能够搜到，图标如下：
&lt;img src=&quot;/assets/images/becoming_committer/2FA_APP.png&quot; alt=&quot;2FA APP&quot; class=&quot;align-center&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Haishi Yao</name></author><category term="Committer" /><category term="Apache Way" /><summary type="html">开源项目没有那么遥远</summary></entry><entry xml:lang="cn"><title type="html">Apache ServiceComb带您对话Apache大咖</title><link href="/cn/docs/talk-to-apache-experts" rel="alternate" type="text/html" title="Apache ServiceComb带您对话Apache大咖" /><published>2018-11-05T00:00:00+08:00</published><updated>2018-11-05T17:10:21+08:00</updated><id>/cn/docs/talk-to-apache-experts</id><content type="html" xml:base="/cn/docs/talk-to-apache-experts">&lt;h2 id=&quot;apache-servicecomb带您对话apache大咖&quot;&gt;Apache ServiceComb带您对话Apache大咖&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;PMC沉睡了怎么办？首次发版项目不一定能够跑起来，甚至不一定能成功编译，一定要先把合规性问题解决！有人给项目提交Patch，我们从来不说“No“！我曾工作过的Cloudera，利用开源赚钱，至少赚到了买下Hortonworks公司的钱……开源微服务项目ServiceComb带您对话Apache大咖，领略Apache专家风采。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2018年10月13日下午，开源微服务项目ServiceComb的团队邀请Apache基金会三位专家成员：Apache孵化器主席Justin Mclean，Apache董事会董事Roman Shaposhnik, 以及Apache基金会秘书长兼形象大使Craig Rossell，与国内Apache项目开发者相聚于上海。针对开发者所关心的&lt;strong&gt;Apache精英管理模式&lt;/strong&gt;、从&lt;strong&gt;孵化器毕业成为顶级项目&lt;/strong&gt;以及&lt;strong&gt;开源软件的商业化&lt;/strong&gt;等主题进行了深入的交流。本文对活动当日的交流进行了纪实和总结。&lt;/p&gt;

&lt;p&gt;（现场为英文分享，本文对其进行翻译整理和校正归纳）&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;开场介绍&quot;&gt;开场介绍&lt;/h3&gt;

&lt;p&gt;[姜宁]今天咱们聚集了国内大部分的Apache相关项目的committer，这些项目包括Beam、ServiceComb、Dubbo、Gearpump、Griffin、Kerlin、Skywalking和Weex。这些Apache项目大部分都还在孵化器中孵化，同时还有一些准备进入Apache孵化的项目。&lt;/p&gt;

&lt;p&gt;我在2006年9月作为Apache CXF 项目 初始 committer与Apache软件基金会结缘，2011年1月正式成为 Apache基金会成员。我作为基金会项目导师（Mentor）参与了多个来自中国的Apache孵化器项目。2017年，我作为项目负责人推动ServiceComb进入Apache 孵化器进行孵化，现在 ServiceComb已经很快就要从Apache孵化器毕业了。&lt;/p&gt;

&lt;p&gt;虽然参与了许多Apache开源项目，坦白地说我对Apache的项目孵化流程并未有系统化全面的理解。直到ServiceComb这个项目，我经历了寻找Mentor，捐赠协议签署，迁移项目，孵化器发版，以及毕业准备这些流程之后，才对Apache孵化器孵化流程有了更加深刻的认识。&lt;/p&gt;

&lt;p&gt;就在刚刚的交流中，我发现大家最关心的问题就是如何从Apache孵化器毕业。 我们今天邀请到远道而来的Apache Member，Roman，Justin，Craig，和国内Apache项目开发者一起分享他们有关Apache孵化器孵化经验，以及开源相关的感悟。&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;如何从apache软件基金会孵化器毕业成为顶级项目&quot;&gt;如何从Apache软件基金会孵化器毕业成为顶级项目&lt;/h4&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;从Apache孵化器毕业，首要为孵化项目构建一个社区，项目毕业意味着很多事情，比如要&lt;strong&gt;保持开发者的多样性&lt;/strong&gt;，项目贡献者不能仅仅来自一个公司。此外，还应该尝试小版本发布（&lt;strong&gt;make micro releases&lt;/strong&gt;）。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;发布版本时，除了项目本身，还有许多合规性工作（mechanical stuff）要做，例如开源协议，发版签名，发版投票等等。项目进入孵化器后，要尽快尝试发布第一个版本。许多孵化项目（podling）都想在发布版本时中搞定这样或那样的功能，我总是跟他们说，没关系，&lt;strong&gt;项目不一定能够跑起来，甚至不一定能成功编译，一定要先把合规性问题解决&lt;/strong&gt;，然后再专注于功能开发。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;没错，要尽早发版、多做发版。&lt;/p&gt;

&lt;p&gt;[姜宁]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;发布版本尽管痛苦，但是要尽早去做&lt;/strong&gt;。ServiceComb在发布第一个版本时，团队也非常痛苦，但是经历过这个阶段，后面会变得越来越顺利。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;总结：孵化器毕业要点解读&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;构建社区&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;ASF一直坚信好的软件是由强大的社区构建出来的。诚然，代码是一个软件社区的重中之重，但Apache之道**”Community over code”**同样强调社区的重要性。它意味着我们的行事方式，如何看待彼此，如何进行决策，甚至如何编写代码。健康、互相尊重的社区非常重要，这不仅让社区的开发者有被尊重的感觉，也会带来切实的好处。一个健康、多样、包容的社区，可以促进项目不断成长，可持续发展。甚至，有助于用开源技术提供服务的公司获得商业上的成功。&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;保持贡献者多样性&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;ASF非常强调**多样性原则**。 大部分开源软件项目都是创新型项目，多样性保证了开源项目的持续创新， 也保证了社区的健康发展。 开源项目鼓励所有个体或公司参与， 让他们感觉能对项目有所掌控，或者会对项目产生一定影响。这样可以保证意见的多样性、用户的多样性、系统的的多样性。Apache项目通常是要求有三个以上不同公司的人参与开发，以保证项目不会因为其中某个公司的退出而终止。&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;** &lt;u&gt;尽早、尽量多的进行版本发布&lt;/u&gt;**&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;对于构建持续增长的社区有何建议&quot;&gt;对于构建持续增长的社区，有何建议？&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;[郑士汉，Weex]：社区建设、多样性对于毕业非常重要，您能给出一些相关建议吗？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;要让大家觉得自己是受欢迎的。当有人在邮件列表中提问时，我通常会&lt;strong&gt;分配PMC成员关注问题，并咨询提问者是否还需要其他帮助&lt;/strong&gt;，或者有其他问题，我把这个作为日常工作。这样也有利于开发者从用户变成提交者甚至PMC成员。&lt;strong&gt;良好的文档可以让大家更容易使用你的项目&lt;/strong&gt;。而文档的缺失则可能造成用户的流失，人们编译编译代码，就再也不使用这个项目了，因为项目上手太难了。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;良好的文档确实非常重要。此外，我也有其他方面的建议。Apache软件基金会参与了一些项目，吸引了不少开贡献者。我们一直指导Google代码夏令营活动，夏令营由Google赞助，帮开发者更好的发展他们自己的项目。&lt;strong&gt;如果你可以让自己的社区参加类似的活动，对于社区建设无疑是有很大帮助的&lt;/strong&gt;。因为大家来自中国的社区，我也建议一些中国的大公司，例如华为，也可以举办类似的学生项目，学生是一个项目最好的新鲜血液。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;在会议中分享项目、建立技术博客也是不错的方式。&lt;/p&gt;

&lt;p&gt;[吴晟，Skywalking]&lt;/p&gt;

&lt;p&gt;Skywalking是中国开发者发起的一个Apache孵化项目，刚加入孵化时只有15个committer，而现在，代码层面的提交者已经达到了70人。我们提倡大家提交小的改动，这样很容易提交代码来做贡献，所以我们每次发布版本都会吸引一些开发者。当我们没有太多精力投入到测试时，我们会吸引开发者来提供测试，他们可以提交集成测试结果，可以提交测试模型，&lt;strong&gt;只要保持正确的编程风格，PMC的成员就可以进行审查，并合并代码&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;这里我想多提一点，很多项目过于注重质量。有些Apache项目收到一些代码不太完美的提交，就直接丢弃了这些提交，然后自己从头搞起。其实这并没有关系，&lt;strong&gt;如果你收到了不太完美的PR，可以请社区成员帮忙改进质量&lt;/strong&gt;。另外，在JIRA或Github上浏览issue时，如果发现一些比较简单的issue，你可以加个”&lt;strong&gt;easy to fix&lt;/strong&gt;”标签，告诉大家这个issue比较容易解决，这样也可以吸引人来贡献。&lt;/p&gt;

&lt;p&gt;[吴晟]&lt;/p&gt;

&lt;p&gt;没错，我们也会跟踪一些讨论，有些时候我们可能会考虑过于理想的方案。但是好的项目有时候并不完全是完美的代码决定的，还要考虑不同的场景。这样项目才能不断壮大。&lt;/p&gt;

&lt;p&gt;[姜宁]&lt;/p&gt;

&lt;p&gt;我也谈谈自己的感受，我非常赞同Justin所说的“Low the bar”。我在参与Apache Camel项目开发时，它已经非常成熟了，但是我们还采用先提交后Review的方式进开发。 有很多人为Camel提交Patch，&lt;strong&gt;我们从来不说“No”&lt;/strong&gt;。有些人提交的代码质量可能并不太好，我们还是会接受这些补丁，让贡献者觉得自己得到认可。这样，开发者就不会想“啊，我还不够优秀，还无法成为committer，我提交的补丁也不够好，那我还是不提交补丁了。” &lt;strong&gt;在我们合入代码时候，也会顺道帮助修复一下补丁上面的问题&lt;/strong&gt;。 顺便说一句，Apache Camel现在有200多个组件，目前项目只有大概4，5个人在维护，很大程度上是得益与这种降低社区门槛的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;总结：构建社区的建议&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;让大家觉得自己是受欢迎的。&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;编写良好的文档，降低初学者入门难度。&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;参与或组织类似Google代码夏令营的学生项目。&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;在技术会议中分享项目经验，建立技术博客传播技术。&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;提倡小的改动，乐于接受他人的贡献，乐于帮助改进质量，让开发者更容易参与社区贡献。&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;项目的提交者和pmc成员不够活跃我应该怎么办&quot;&gt;项目的提交者和PMC成员不够活跃，我应该怎么办？&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;[史少锋，Kerlin]：有些开发者成为提交者后就消失了，有时候PMC成员也不能非常及时的审查提交，有没有什么规则推动大家活跃起来？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;我觉得提交者或者PMC成员不活跃并不是问题，不是所有人都必须活跃。但是如果项目的导师不活跃就是问题了，因为导师要指导项目，告诉项目成员正确的做事方法。我们没办法为提交者和PMC成员制定“（及时反馈的）规则”，这样对他们要求太高了。&lt;strong&gt;我们应该降低门槛，让更多人参与进来&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;通常，每个项目的PMC都有VP（Vice President），VP主要负责合规性相关的工作，向Apache董事会汇报，但是VP也要担当起项目的领导者角色。&lt;strong&gt;即便所有其他PMC成员都在沉睡，VP也是唯一要保持清醒的人&lt;/strong&gt;。VP是默认的那个要回答问题的人，当然不是技术相关的问题，而是回答管理流程相关的问题。如果邮件列表无人响应，你要写信给VP，告诉他，“嘿，大家似乎都睡着了，我们应该怎么办呢？”。VP有权利做出改变，他可以组织大家开始审查提交，让大家醒过来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;总结：PMC沉睡了怎么办&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;Apache基金会是个公益组织，不能通过强制要求来约束成员。&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;可以通过降低门槛，让更多人可以参与进来，解决社区响应不及时的问题。&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;VP承担项目领导责任，要时刻保持活跃。遇到问题可以向VP寻求帮助&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;在Apache软件基金会的组织结构中，Apache董事会根据基金会的管理原则，负责管理和监督对外合作的商业和事务，包括基金、知识资产、注册商标等。每个Apache项目都有一个PMC（项目管理委员会），负责项目的管理和监督，并定期向Apache董事会汇报项目情况。PMC有一位主席（Chairperson），也被称为该项目的Vice President，简称VP。VP由董事会指定，是董事会和项目之间的接口人，负责项目汇报、同时与PMC一同保证项目和代码遵从法规、管理商标事务、管理邮件列表等合规性问题，发展新的Committer和PMC成员。&lt;/u&gt;&lt;/p&gt;

&lt;h4 id=&quot;发版投票过程漫长如何保持正确的发版姿势&quot;&gt;发版投票过程漫长，如何保持正确的发版“姿势”？&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;[张天伦，Gearpump]：发版投票需要经过至少72+72个小时，过程非常漫长，又担心犯错误导致投票过少进而导致发版失败。并且，有时候发起投票，响应的人比较少。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;犯一次错误没关系，可以向导师寻求帮助以避免重复多次犯错误。&lt;strong&gt;在开始的一两次发版中，有一些错误很正常，但是后续的版本发布就会越来越顺利&lt;/strong&gt;。如果发版时响应人数比较少，可以直接在邮件列表中提醒孵化器项目管理委员会（IPMC）成员，特别是导师，进行投票。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;我想大家对敏捷开发都比较熟悉，敏捷开发提倡小幅度的改动，多进行更新。如果你的项目遵循敏捷开发方式，将对版本发布大有裨益。我指导项目孵化时，除了首次发版需要在合规性方面花费很多时间，后面的版本尽量在每个月或每两个月发布一次，新版本不一定要加入很多功能，每月发一次版本，更容易让IPMC的成员审查新版本的变动。因此，&lt;strong&gt;首次发版，解决合规性问题，然后尽快发版，多做发版&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;另外，可以将新版本改动写入版本说明中，可以让审查工作变得轻松很多。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;没错，小幅度迭代也可以帮你构建社区。社区贡献者提交的补丁越小，越容易进行审查。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;总结：在Apache孵化器发布版本的要点&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;不要担心在发版时犯错误，大胆的向导师和IPMC成员寻求帮助，但要避免犯重复的错误&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;借鉴敏捷开发模式，小版本迭代，频繁更新&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;首次发版扫除一切合规性问题，后续版本专注功能和质量&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;让版本更新更容易审查&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何使用开源软件进行商业化&quot;&gt;如何使用开源软件进行商业化？&lt;/h4&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;开源商业化的模式是多种多样的。红帽（RedHat）就是一个很成功的例子，他们用开源收益颇丰。也有一些新的公司，例如我曾工作过的Cloudera，利用开源赚钱，至少赚到了买下Hortonworks公司的钱（众人笑）。&lt;/p&gt;

&lt;p&gt;我大致可以列出3种开源商业化的模式。首先，几乎所有云服务厂商都使用开源产品，将其&lt;strong&gt;变成服务&lt;/strong&gt;来进行营利，这就是一个很常见的商业化模式。例如，我很惊喜地看到华为云的流服务使用了Apache Flink，这就是华为使用开源盈利的方式。&lt;/p&gt;

&lt;p&gt;另外一种比较传统但应用广泛的商模式，&lt;strong&gt;以开源软件为核心构建产品，并提供额外的组件和技术&lt;/strong&gt;。这些额外的部分不一定是开源的。例如你的产品可以用Apache项目作为核心，然后加入GPL协议的组件，再加上一些私有的组件，然后就可以像微软出售Windows系统，或者Adobe出售Adobe Creative Suite那样盈利了。&lt;/p&gt;

&lt;p&gt;第三种商业化模式，就是&lt;strong&gt;基于开源软件提供差异化的集成服务或者解决方案&lt;/strong&gt;。将开源软件集成为一个更大的系统，提供给客户以进行营利。你可以运营一个专业的服务公司，用开源软件帮助用户简化业务。例如，你的公司服务于酒店或工厂，帮他们实现自动化运维。客户并不在乎你用什么软件或技术，他们只关心端到端的方案能够顺利实施。你的公司使用开源软件，可以按照自己的需求进行优化，也避免了收费的商业软件侵占你的利润。&lt;/p&gt;

&lt;p&gt;[Craig]&lt;/p&gt;

&lt;p&gt;在培训行业，经常有公司需要培训自己的员工来学习、使用Apache软件。我们曾短暂的考虑过和商业公司合作提&lt;strong&gt;供培训服务&lt;/strong&gt;，然后与商业公司分享利润。但是这个念头只是一闪而过就被我们否决了，这样会与提供Apache软件培训服务的人形成竞争，这样有悖于Apache厂商中立的原则。所以，&lt;strong&gt;如果你想通过开源软件培训来盈利，大胆去做，这也是一个不错的开源商业化模式&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;总结：开源商业化的几种方式&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;用开源软件提供服务，例如那些云服务厂商&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;基于开源软件提供额外的收费功能&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;利用开源软件提供集成服务，并提供商业支持&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;开展开源软件的培训服务&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;活动尾声&quot;&gt;活动尾声&lt;/h3&gt;

&lt;p&gt;经过一番深入的沟通和交流，现场的开发者对Apache基金会、基金会的精英管理模式、Apache孵化器的运作模式都有了进一步的了解。在meetup活动的最后，三位Apache专家带领现场所有开发者进行了“Apache问答”小游戏。问答题目由Justin编写，公布在网站https://rawgit.com/justinmclean/ApacheQuiz/master/compiled/index.html 上，问题有不同的难度等级，涉及Apache基金会的管理模式、Apache开源协议、版本发布注意事项、三方软件集成等。三位专家与开发者一起答题，并对题目进行了风趣幽默的解读。最终，活动在一片欢笑声中结束，三位专家与开发者进行合影留念。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apache-developers-gathering-shanghai.jpg&quot; alt=&quot;apache-developers-gathering&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;关于apache-servicecomb&quot;&gt;关于Apache ServiceComb&lt;/h3&gt;
&lt;p&gt;Apache ServiceComb是一个开源微服务框架，旨在使开发人员能够高效、方便的构建和管理微服务应用。该项目源于华为云微服务引擎CSE，借鉴和继承了华为诸多微服务实践经验，于2017年5月开源并在同年11月捐赠给Apache软件基金会。历经近一年的孵化，ServiceComb从微服务软件开发套件发展成为完整的微服务解决方案，用户数迅速增长，并获得了来自企业和社区开发者的广泛支持。2018年10月24日，ServiceComb从Apache孵化器顺利毕业成为顶级项目。&lt;/p&gt;

&lt;h3 id=&quot;关于apache基金会&quot;&gt;关于Apache基金会&lt;/h3&gt;

&lt;p&gt;Apache软件基金会是一个成立于1999年的非盈利慈善组织，英文名称 Apache Software Foundation，简称 ASF，最早源于开发Apache HTTP服务器的一个爱好者组织“Apache组织”。经过近20年的发展，Apache软件基金会已成为世界上最大的开源基金会，负责监管350多个免费的企业级项目和1.9亿多行的代码，它们作为主干支撑着全球广泛使用的应用程序。&lt;/p&gt;

&lt;h3 id=&quot;加入apache开发者社区&quot;&gt;加入Apache开发者社区&lt;/h3&gt;

&lt;p&gt;Apache软件基金会作为全球最大的开源软件基金会，其独特的精英治理模式和社区文化得到了全球无数开发者的青睐。如果读者有意加入Apache社区，参与Apache开源项目贡献，&lt;strong&gt;可以参考《&lt;a href=&quot;http://servicecomb.apache.org/cn/developers/becomming-a-commiter&quot;&gt;如何成为commiter&lt;/a&gt;》，了解Apache基金会的管理模式，以及《&lt;a href=&quot;http://servicecomb.apache.org/cn/docs/how-to-grow-up-to-be-an-apache-committer&quot;&gt;从开源小白到Apache Commiter&lt;/a&gt;》，体会开发者成长为commiter的心路历程。期待在Apache社区见到更多中国开发者的身影，我们，社区见！&lt;/strong&gt;&lt;/p&gt;</content><author><name>Zhen Ju</name><email>juzhenatpku@gmail.com</email><uri>https://github.com/crystaldust</uri></author><category term="微服务" /><category term="Meetup" /><category term="Apache" /><summary type="html">Apache专家现场解读Apache基金会及孵化器运作模式</summary></entry><entry xml:lang="cn"><title type="html">Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT Download)</title><link href="/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report/" rel="alternate" type="text/html" title="Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT Download)" /><published>2018-10-29T00:00:00+08:00</published><updated>2018-10-29T17:18:43+08:00</updated><id>/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report</id><content type="html" xml:base="/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report/">&lt;p&gt;Apache软件基金会（ASF）的三位Apache专家与ServiceComb Team在上海世博会会展中心举办了Apache Service ServiceComb会议。。此次会议，八位发言者提出了六个主题，分别是关于Apache Way的解释、Apache ServiceComb的路线图、ServiceMesh的探索分享、快速微服务编程的实践经验等。约50人参加了现场会议，600人在线观看。会中以讨论互动的形式进行，开放的、积极的气氛贯穿整个会议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《Apache之道》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/EN/1_The_Apache_Way.pdf&quot;&gt;PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roman Shaposhnik, Justin Mclean, Craig Russell：&lt;/strong&gt; Apache软件基金会是全球最大的开源基金会，目前拥有300多个开源项目，涵盖大数据、云计算、服务器和Web框架、构建管理、内容管理、物联网等众多领域。三位来自Apache基金会的专家将详细介绍Apache基金会发展历程及现状，阐述Apache基金会的运作方式，解读Apache软件基金会的核心理念—Apache Way。同时分析作为一个Apache项目需要遵守的合规性规则及背后所蕴含的意义。并介绍Apache基金会孵化器的概况及项目流程，讨论Apache孵化项目如何发展社区并毕业成为顶级项目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/1.jpeg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Apache ServiceComb(incubating)社区最新路线》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/2_ApacheServiceComb(Incubating)Community_Roadmap.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/2_ApacheServiceComb(Incubating)Community_Roadmap.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;姜宁：&lt;/strong&gt; 介绍ServiceComb社区自1.0.0版本发布之后的整体技术演进路线和项目在Apache软件基金会的最新成长状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/2.jpeg&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《ServiceComb在Service Mesh的探索与思考》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/4_ServiceComb’s_Exploration_of_Service_Mesh.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/4_ServiceComb’s_Exploration_of_Service_Mesh.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;田晓亮：&lt;/strong&gt; 介绍ServiceComb在生态兼容Service Mesh方面的工作，阐述ServiceComb在支持零侵入微服务化方面以及和传统微服务框架实现方式的协同部署、治理的探索。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/4.jpeg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Service Mesh微服务化和传统框架微服务化混合部署协同实践分享》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/3_ServiceMesh-based_Microservices_and_Those_Based_on_a_Traditional_Architecture.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/3_ServiceMesh-based_Microservices_and_Those_Based_on_a_Traditional_Architecture.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;苗彦杰：&lt;/strong&gt; 在以Service Mesh为代表的零侵入微服务化发展过程中，如何与传统侵入式框架开发的微服务混合部署、协同治理成为了一道难题。演讲者将从自身的业务背景出发，介绍如何借助ServiceComb和Mesher完成混合部署，分享其中遇到的问题和解决方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/3.jpeg&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Apache Committer 成长经验分享》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/5_My_Participation_in_ServiceComb.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/5_My_Participation_in_ServiceComb.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;冯征：&lt;/strong&gt; 作为ServiceComb的新晋PMC和Committer，讲述自己如何在ServiceComb项目中成长的历程，分享自身参与开源社区的经验和收获。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/5.jpeg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《快速微服务化编程体验》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/6_Experience_on_Fast_Microservice_Programming.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/6_Experience_on_Fast_Microservice_Programming.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;巨震：&lt;/strong&gt; 现场演示如何快速使用ServiceComb Java-chassis和Service Mesh技术Mesher进行微服务化应用编程，结合Kubernetes进行快速部署，并和与会者互动练习。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/6.jpeg&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;关于Apache ServiceComb 项目&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;ServiceComb Apache软件基金会孵化项目的主体代码由华为云捐赠，致力于帮助企业轻松构建云原生应用及传统企业业务快速微服务化，通过系列解决方案帮助用户快速开发微服务的同时实现对这些微服务应用的高效运维管理。它具有完整的微服务生态栈，无厂商锁定，当前遵循Apache Way进行孵化，已拥有如消费者云、云EI、云安全、云核等华为业务之外的一批非华为商用用户，且社区和开发者也日趋多样化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如您有更多问题关于Aapche ServiceComb，请您加入ServiecComb Gitter聊天室咨询：&lt;a href=&quot;https://gitter.im/ServiceCombUsers/Lobby&quot;&gt;ServiceComb Gitter 聊天室&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Dean Lee</name></author><category term="microservice" /><category term="Meetup" /><summary type="html">Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT)</summary></entry></feed>